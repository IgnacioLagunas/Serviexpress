openapi: 3.0.0
info:
  title: "User API"
  version: "1.0.0"
paths:
  /api/users/:
    get:
      summary: "Get all users"
      operationId: "getAllUsers"
      tags:
        - "Users"
      responses:
        '200':
          description: "Success. Returns the list of users."
    post:
      summary: "Create a new user"
      operationId: "createNewUser"
      tags:
        - "Users"
      responses:
        '201':
          description: "Created. Returns the details of the new user."

  /api/users/{id}:
    get:
      summary: "Get a user by ID"
      operationId: "findUserById"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to retrieve"
          schema:
            type: "string"
      responses:
        '200':
          description: "Success. Returns the details of the user."
        '404':
          description: "Not Found. The user with the specified ID does not exist."

    put:
      summary: "Update a user by ID"
      operationId: "updateUser"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to update"
          schema:
            type: "string"
      responses:
        '200':
          description: "Success. Returns the details of the updated user."
        '404':
          description: "Not Found. The user with the specified ID does not exist."

    delete:
      summary: "Delete a user by ID"
      operationId: "deleteUser"
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          required: true
          description: "ID of the user to delete"
          schema:
            type: "string"
      responses:
        '204':
          description: "No Content. User deleted successfully."
        '404':
          description: "Not Found. The user with the specified ID does not exist."

components:
  schemas:
    User:
      type: object
      required:
        - first_name
        - last_name
        - email
      properties:
        first_name:
          type: string
          description: "User's first name"
        last_name:
          type: string
          description: "User's last name"
        email:
          type: string
          format: email
          description: "User's email"
          unique: true
        password:
          type: string
          default: null
          description: "User's password"
        role:
          type: string
          default: user
          enum:
            - admin
            - user
            - premium
          description: "User's role"

        cart:
          type: string
          format: uuid
          description: "ID of the user's cart"